# Using all lines available but fixed Balmer ratios
import emcee

# Case B, 10000K. From Osterbrook +98
Ha_Hb_ratio = 2.86 ## check this
Hg_Hb_ratio = 0.466 
Hd_Hb_ratio = 0.256 

# Wavelenghts
super_wav = {'Ha':6562.,'Hb':4861.,'Hg':4340.,'Hd':4102.,'H7':3970}

def err_ratio(x,y,e_x,e_y):
    """ Formal Error of x/y """
    return x/y * np.sqrt((e_x/x)**2 + (e_y/y)**2)

# Extinction laws. Others can be included
def ext_coef(tau_v,wav):
    """ Expoenent factor in the Charlot and Fall 2000 extinction"""
    return tau_v * (wav/5500.)**(-1.3)

def calzetti(Ebv,wav):
    """ Calzetti 2000 law"""
    Rv = 4.05
    wav = wav * 0.0001# to microns
    if wav >= 0.63:
        k = 2.659*(-1.857 + 1.040/wav) + Rv
    else:
        k = 2.659*(-2.156 + 1.509/wav - 0.198/wav**2 + 0.011/wav**3) +Rv
    ## This law is for stellar extinction. E(B-V)gas = E(B-V)stellar /0.44
    return 0.4*k*Ebv/0.44


def calculate_extinction(fluxes,errors,ext_min,ext_max,law='Calzetti2000',nsteps=100):
    
    # Set Prior function
    def lnprior(x):
        # We're using only uniform priors
        if x < ext_min or x > ext_max:
            return -np.inf
        return 0.

    #Log Likelihood function
    def lnprob(x,obs_flux,obs_err):

        # Deredenned observations
        if law == 'Charlot2000':
            dered_factor = np.array([np.exp(ext_coef(x,super_wav[k])) for k in obs_flux.keys()])
        if law == 'Calzetti2000':
            dered_factor = np.array([10**(calzetti(x,super_wav[k])) for k in obs_flux.keys()])
            
        dered = {key:fobs*ext for key,fobs,ext in zip(obs_flux.keys(),obs_flux.values(),dered_factor)}
        edered  = {key:fobs*ext for key,fobs,ext in zip(obs_flux.keys(),obs_err.values(),dered_factor)}

        # Calculate observed ratios
        data = np.array((dered['Ha']/dered['Hb'],dered['Hg']/dered['Hb'],dered['Hd']/dered['Hb']))

        data_err = np.array((err_ratio(dered['Ha'],dered['Hb'],edered['Ha'],edered['Hb']),
                             err_ratio(dered['Hg'],dered['Hb'],edered['Hg'],edered['Hb']),
                             err_ratio(dered['Hd'],dered['Hb'],edered['Hd'],edered['Hb'])))
        
        # Likelihood Function
        model = np.array((Ha_Hb_ratio,Hg_Hb_ratio,Hd_Hb_ratio))
        lnlikelihood = -0.5 * np.nansum((model-data)**2/data_err**2 + np.log(2*np.pi*data_err**2))

        # Add priors
        return lnlikelihood + lnprior(x)

                          
    # The old code (for metallicity and extinction) used dictionaries
    input_flux = {k:d for k,d in zip(('Ha','Hb','Hg','Hd'),fluxes)}
    input_err= {k:d for k,d in zip(('Ha','Hb','Hg','Hd'),errors)}   
    
    # Prepare sampler
    nwalkers, ndim = 2, 1
    sampler = emcee.EnsembleSampler(nwalkers, ndim, lnprob, args=(input_flux,input_err))

    # Prepare initial values
    p0 = np.random.uniform(low=ext_min, high=ext_max, size=nwalkers).reshape((nwalkers, ndim))

    # Burn in and fit 
    pos, prob, state = sampler.run_mcmc(p0, 100)
    sampler.reset()
    sampler.run_mcmc(pos, 1000)
    # median and 1 sigma
    return  np.percentile(sampler.chain,(50,16,84))
